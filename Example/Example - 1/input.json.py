{
    "结构体": # 结构体(数量不作限制，可以超过传统的 8 个)
    [
        {
            "显示条件":
            {
                "分数条件":
                {
                    "\"Happy2018new\"": # 这里的 Happy2018new 是计分板，不一定必须加引号，按需要就可
                    [
                        [8,12]
                    ],
                    "DEMO1": # 这里的 DEMO1 是计分板
                    [
                        [1,2],
                        [7,9]
                    ]
                },
                "目标选择器":"@r",
                # 这里的选择器是“@r”，所以输出的结果形如“@r[……]”
                # 你可以填写任意的字符串，但是只有填写 @r @s @p @e @a @initiator 等选择器才可能正常执行指令
                "其他目标选择器参数":[] # 如果不附加其他目标选择器参数就使用“[]”
            },
            # 当 @r 满足 Happy2018new=8..12 且 (DEMO1=1..2 或 DEMO1=7..9) 时依次显示“内容”中的所有内容
            # 如果 内容 内有嵌套，则根据 嵌套 内提供的 条件 决定对应的内容是否显示
            "嵌套位置":[2], # 在 内容 的第二项嵌套一个 {"结构体":[]}
            "内容":
            [
                {"text":"不好"}, # 第一项内容
                {
                    "结构体": # 结构体(数量不作限制，可以超过传统的 8 个)
                    [
                        {
                            "显示条件":
                            {
                                "分数条件":
                                {
                                    "abcd":[ ["min","max"] ]
                                },
                                # 这里的 abcd 是计分板
                                # 这里的 min 和 max 分别指代 最小值 和 最大值
                                # 计分板中的最小值是 -2147483648 ，最大值是 2147483647
                                # 此处的 min 也可以写为 Min
                                # 同理，max 也可以写为 Max
                                "目标选择器":"@p", 
                                # 当 @p 在 abcd 上有分数时依次显示“内容”中的所有内容
                                "其他目标选择器参数":["x=1","r=3"]
                                # 附加选择器参数 x=1 和 r=3
                            },
                            # 当 @s[scores={abcd=-2147483648..2147483647},x=1,r=3]
                            # 可以选中时依次显示 内容 中的所有元素
                            # 如果 内容 内有嵌套，则根据 嵌套 内提供的 分数条件 决定对应的内容是否显示
                            "嵌套位置":[],
                            # 这里列表是空的，说明 内容 里面没有要嵌套 {"结构体":[]} 的元素
                            "内容":
                            [
                                {"score":{"objective":"√","name":"*"}},
                                {"text":"测试"}
                                # 众所周知，你可能需要显示很多个东西，所以你可以发现这个
                                # “内容”是个列表
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}

# 文件名字应该是 input.json ，用 .py 作为后缀名只是为了方便注释。
# 你可以无限嵌套下去。我并没有在代码中限制递归深度。但是 python 自己有默认的递归深度，也就是 1000 。
# 不过，递归 1000 次的话，可能命令方块都塞不下指令吧。
# 除非，你是禽兽？？

# 需要注意的是，支持任何形式的选择器参数付出了巨大的代价。如果您给出了太多的选择器参数，那么本系统
# 会由于超过递归深度而无法转换。
# 因此，如果不是特别需要，请尝试使用相同的计分板和相同的选择器解决问题。
# 注意，上文提到的是“相同的计分板和相同的选择器”。
# 如果你使用不同的计分板或者不同的选择器，那么依旧会在大多数情况下触发嵌套而导致向下递归。
